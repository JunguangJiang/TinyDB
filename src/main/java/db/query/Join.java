package db.query;

import db.DbException;
import db.field.TypeMismatch;
import db.tuple.Tuple;
import db.tuple.TupleDesc;

import java.util.ArrayList;
import java.util.Iterator;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator{
    private static final long serialVersionUID = 1L;

    private OpIterator lhs, rhs;
    private TupleDesc tupleDesc1, tupleDesc2;
    private Predicate predicate;
    private ArrayList<Tuple> tuples = new ArrayList<>();
    private Iterator<Tuple> iterator;

    /**
     * A helper class which wraps predicate and rhs in Join.
     */
    public static class JoinPart{
        public Predicate predicate;
        public OpIterator rhs;
        public JoinPart(Predicate predicate, OpIterator rhs) {
            this.predicate = predicate;
            this.rhs = rhs;
        }
    }

    /**
     * `lhs` JOIN `rhs` ON `predicate`
     * @param lhs
     * @param predicate
     * @param rhs
     */
    public Join(OpIterator lhs, Predicate predicate, OpIterator rhs) {
        this.lhs = lhs;
        this.rhs = rhs;
        this.predicate = predicate;
        this.tupleDesc1 = lhs.getTupleDesc();
        this.tupleDesc2 = rhs.getTupleDesc();
    }

    public Join(OpIterator lhs, JoinPart joinPart) {
        this(lhs, joinPart.predicate, joinPart.rhs);
    }

    @Override
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(this.tupleDesc1, this.tupleDesc2);
    }

    @Override
    public void open() throws DbException, TypeMismatch {
        this.lhs.open();
        this.rhs.open();
        // TODO decrease the loop times
        while (lhs.hasNext()) {
            Tuple tuple1 = lhs.next();
            while (rhs.hasNext()) {
                Tuple tuple2 = rhs.next();
                Tuple mergedTuple = Tuple.merge(tuple1, tuple2);
                if (predicate.filter(mergedTuple)) {
                    tuples.add(mergedTuple);
                }
            }
            rhs.rewind();
        }
        iterator = tuples.iterator();
        super.open();
    }

    @Override
    public void close() {
        lhs.close();
        rhs.close();
        super.close();
        iterator = null;
    }

    @Override
    public void rewind() throws DbException {
        iterator = tuples.iterator();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see ComparisonPredicate#filter
     */
    @Override
    protected Tuple fetchNext() throws DbException {
        if (iterator != null && iterator.hasNext()) {
            return iterator.next();
        } else {
            return null;
        }
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[] {
                lhs,
                rhs
        };
    }

    @Override
    public void setChildren(OpIterator[] children) {
        this.lhs = children[0];
        this.rhs = children[1];
    }
}
