package db.JDBC;

import java.net.Socket;
import java.sql.*;
import java.util.Map;
import java.util.Properties;


public class JDBCConnection implements Connection {
    private Socket client;
    JDBCConnection(String url) throws SQLException {
        String[] items = url.split(":");
        if (items.length != 4) {
            throw new SQLException();
        }
        String serverName = items[2].substring(2);
        int port = Integer.parseInt(items[3]);
        try {
             client = new Socket(serverName, port);
        } catch (Exception e) {
            e.printStackTrace();
            throw new SQLException();
        }
    }

    public synchronized Statement createStatement() throws SQLException {
        return new JDBCStatement(client);
    }

    public synchronized PreparedStatement prepareStatement(String sql) throws SQLException {
        return null;
    }


    public synchronized CallableStatement prepareCall(String sql) throws SQLException {
        return null;
    }

    public synchronized String nativeSQL(final String sql) throws SQLException {
        return null;
    }

    public synchronized void setAutoCommit(boolean autoCommit) throws SQLException {
    }

    public synchronized boolean getAutoCommit() throws SQLException {
        return false;
    }

    public synchronized void commit() throws SQLException {
    }

    public synchronized void rollback() throws SQLException {

    }

    public synchronized void close() throws SQLException {
        isClosed = true;
    }

    public synchronized boolean isClosed() throws SQLException {
        return isClosed;
    }

    public synchronized DatabaseMetaData getMetaData() throws SQLException {
        return null;
    }

    public synchronized void setReadOnly(boolean readOnly) throws SQLException {
    }

    public synchronized boolean isReadOnly() throws SQLException {
        return true;
    }

    public synchronized void setCatalog(String catalog) throws SQLException {
    }

    public synchronized String getCatalog() throws SQLException {
        return "";
    }

    public synchronized void setTransactionIsolation(int level) throws SQLException {
    }

    public synchronized int getTransactionIsolation() throws SQLException {
        return Connection.TRANSACTION_NONE;
    }

    public synchronized SQLWarning getWarnings() throws SQLException {
        return null;
    }

    public synchronized void clearWarnings() throws SQLException {
    }

    public synchronized Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return null;
    }

    public synchronized PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return null;
    }

    public synchronized CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return null;
    }


    public synchronized Map<String, Class<?>> getTypeMap() throws SQLException {
        return new java.util.HashMap<String, Class<?>>();
    }

    public synchronized void setTypeMap(Map<String, Class<?>> map) throws SQLException {
        throw new SQLException();
    }

    public synchronized void setHoldability(int holdability) throws SQLException {
    }

    public synchronized int getHoldability() throws SQLException {
        return 0;
    }

    public synchronized Savepoint setSavepoint() throws SQLException {
        return null;
    }

    public synchronized Savepoint setSavepoint(String name) throws SQLException {
        return null;
    }

    public synchronized void rollback(Savepoint savepoint) throws SQLException {
    }

    public synchronized void releaseSavepoint(Savepoint savepoint) throws SQLException {
    }

    public synchronized Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return null;
    }

    public synchronized PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return null;
    }

    public synchronized CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return null;
    }

    public synchronized PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return null;
    }

    public synchronized PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return null;
    }

    public synchronized PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return null;
    }

    public Clob createClob() throws SQLException {
        return null;
    }

    public Blob createBlob() throws SQLException {
        return null;
    }

    public NClob createNClob() throws SQLException {
        return null;
    }

    public SQLXML createSQLXML() throws SQLException {
        return null;
    }

    public boolean isValid(int timeout) throws SQLException {
        return true;
    }

    public void setClientInfo(String name, String value) throws SQLClientInfoException {

    }

    public void setClientInfo(Properties properties) throws SQLClientInfoException {

    }

    public String getClientInfo(String name) throws SQLException {
        return "";
    }

    public Properties getClientInfo() throws SQLException {
        return null;
    }

    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        return null;
    }

    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        return null;
    }

    public <T>T unwrap(Class<T> iface) throws SQLException {
        return null;
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return true;
    }

    public void setSchema(String schema) throws SQLException {
    }

    public String getSchema() throws SQLException {
        return null;
    }

    public void abort(java.util.concurrent.Executor executor) throws SQLException {
        close();
    }

    public void setNetworkTimeout(java.util.concurrent.Executor executor, int milliseconds) throws SQLException {
        throw new SQLException();
    }

    public int getNetworkTimeout() throws SQLException {
        return 0;
    }

    private boolean isClosed;
}
