package tinydb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate predicate;
    private OpIterator child1, child2;
    private TupleDesc tupleDesc1, tupleDesc2;
    private int field1, field2;
    private ArrayList<Tuple> tuples = new ArrayList<>();
    private Iterator<Tuple> iterator;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.predicate = p;
        this.child1 = child1;
        this.child2 = child2;
        this.tupleDesc1 = child1.getTupleDesc();
        this.tupleDesc2 = child2.getTupleDesc();
        this.field1 = p.getField1();
        this.field2 = p.getField2();
    }

    public JoinPredicate getJoinPredicate() {
        return this.predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return this.tupleDesc1.getFieldName(this.field1);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return this.tupleDesc2.getFieldName(this.field2);
    }

    /**
     * @see tinydb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(this.tupleDesc1, this.tupleDesc2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // TODO
        child1.open();
        child2.open();
        // simple nested loop
        while (child1.hasNext()) { // outer loop
            Tuple tuple1 = child1.next();
            while (child2.hasNext()) { // inner loop
                Tuple tuple2 = child2.next();
                if (predicate.filter(tuple1, tuple2)) {
                    Tuple mergedTuple = Tuple.merge(tuple1, tuple2);
                    tuples.add(mergedTuple);
                }
            }
            child2.rewind();
        }
        iterator = tuples.iterator();
        super.open();
    }

    public void close() {
        child1.close();
        child2.close();
        super.close();
        iterator = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        iterator = tuples.iterator();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // TODO
        if(iterator != null && iterator.hasNext()) {
            return iterator.next();
        } else {
            return null;
        }
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[] {
                child1,
                child2
        };
    }

    @Override
    public void setChildren(OpIterator[] children) {
        this.child1 = children[0];
        this.child2 = children[1];
    }

}
